import json
import numpy as np
from bicm import BipartiteGraph as BG

import igraph
from tqdm import tqdm, trange

from lour import LouR


def get_vu_dico(verified_adj_list, lou_reshuffle=1000):
    """
    It gets the discursive community (dico) for the verified users (vu) by projecting the bipartite network of
    verified and unverified users. 
    
    :param verified_adj_list: the adjacency list of the bipartite network of verified and unverified users, as it is generated by get_rt_network.py
    :type verified_adj_list: dict
    
    :param lou_reshuffle: the implemented community detection algorithm is Louvain, which is known to be order dependent. In order to overcome such an issue, it is performed a randomization of the order of the nodes. lou_reshuffle contains the number of reshuffles, default is 1000.
    :type lou_reshuffle: int
    
    :return memb_dict: a dictionary encoding the verified users discursive communities. user ids are the key and the dico are the values.
    :type memb_dict: dict
    
    """

    
    # get the edge list from verified_adj_list 
    el=[]
    for key in verified_adj_list.keys():
        _nn=verified_adj_list[key]
        for i_nn in _nn:
            el.append((key, i_nn))
    
    #get the validated projection
    myGraph = BG()
    myGraph.set_edgelist(el)        
    
    myGraph.solve_tool(light_mode=True, method='newton', initial_guess=None, tol=1e-08, max_steps=500, verbose=False, linsearch=True, regularise=True, print_error=True)
    validated_links=myGraph.get_rows_projection(alpha=0.01, fmt='edgelist')
        
    # get the validated graph 
    validated_graph=igraph.Graph(directed=False)
    #validated node list
    vnl=np.unique(validated_links)
    # adding vertices
    validated_graph.add_vertices(vnl)
    #adding edges
    validated_graph.add_edges(validated_links)
        
    vg_lou=LouR('undirect validation', validated_graph, len(vnl),lou_reshuffle)
    memb_dict=dict(zip(validated_graph.vs['name'], vg_lou.membership))
    
    return memb_dict
        
        
        
    
    